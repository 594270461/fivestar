// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CardFiveStarMessage.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace ETHotfix {

  #region Messages
  /// <summary>
  ///开始游戏通知
  /// </summary>
  public partial class Actor_FiveStar_StartGame : pb::IMessage {
    private static readonly pb::MessageParser<Actor_FiveStar_StartGame> _parser = new pb::MessageParser<Actor_FiveStar_StartGame>(() => (Actor_FiveStar_StartGame)MessagePool.Instance.Fetch(typeof(Actor_FiveStar_StartGame)));
    public static pb::MessageParser<Actor_FiveStar_StartGame> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int roomId_;
    /// <summary>
    ///房间ID
    /// </summary>
    public int RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.FiveStarPlayer> _repeated_playerInfos_codec
        = pb::FieldCodec.ForMessage(10, global::ETHotfix.FiveStarPlayer.Parser);
    private pbc::RepeatedField<global::ETHotfix.FiveStarPlayer> playerInfos_ = new pbc::RepeatedField<global::ETHotfix.FiveStarPlayer>();
    /// <summary>
    ///开始游戏所有玩家信息
    /// </summary>
    public pbc::RepeatedField<global::ETHotfix.FiveStarPlayer> PlayerInfos {
      get { return playerInfos_; }
      set { playerInfos_ = value; }
    }

    private static readonly pb::FieldCodec<int> _repeated_roomConfigs_codec
        = pb::FieldCodec.ForInt32(18);
    private pbc::RepeatedField<int> roomConfigs_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///房间配置信息
    /// </summary>
    public pbc::RepeatedField<int> RoomConfigs {
      get { return roomConfigs_; }
      set { roomConfigs_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      playerInfos_.WriteTo(output, _repeated_playerInfos_codec);
      roomConfigs_.WriteTo(output, _repeated_roomConfigs_codec);
      if (RoomId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RoomId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomId);
      }
      size += playerInfos_.CalculateSize(_repeated_playerInfos_codec);
      size += roomConfigs_.CalculateSize(_repeated_roomConfigs_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < playerInfos_.Count; i++) { MessagePool.Instance.Recycle(playerInfos_[i]); }
      playerInfos_.Clear();
      roomConfigs_.Clear();
      roomId_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            playerInfos_.AddEntriesFrom(input, _repeated_playerInfos_codec);
            break;
          }
          case 18:
          case 16: {
            roomConfigs_.AddEntriesFrom(input, _repeated_roomConfigs_codec);
            break;
          }
          case 24: {
            RoomId = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///小局开始游戏
  /// </summary>
  public partial class Actor_FiveStar_SmallStartGame : pb::IMessage {
    private static readonly pb::MessageParser<Actor_FiveStar_SmallStartGame> _parser = new pb::MessageParser<Actor_FiveStar_SmallStartGame>(() => (Actor_FiveStar_SmallStartGame)MessagePool.Instance.Fetch(typeof(Actor_FiveStar_SmallStartGame)));
    public static pb::MessageParser<Actor_FiveStar_SmallStartGame> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int currOfficNum_;
    /// <summary>
    ///当前局数
    /// </summary>
    public int CurrOfficNum {
      get { return currOfficNum_; }
      set {
        currOfficNum_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (CurrOfficNum != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CurrOfficNum);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (CurrOfficNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrOfficNum);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      currOfficNum_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CurrOfficNum = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家准备
  /// </summary>
  public partial class Actor_FiveStar_PlayerReady : pb::IMessage {
    private static readonly pb::MessageParser<Actor_FiveStar_PlayerReady> _parser = new pb::MessageParser<Actor_FiveStar_PlayerReady>(() => (Actor_FiveStar_PlayerReady)MessagePool.Instance.Fetch(typeof(Actor_FiveStar_PlayerReady)));
    public static pb::MessageParser<Actor_FiveStar_PlayerReady> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int seatIndex_;
    /// <summary>
    ///准备玩家索引
    /// </summary>
    public int SeatIndex {
      get { return seatIndex_; }
      set {
        seatIndex_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (SeatIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SeatIndex);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (SeatIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatIndex);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      seatIndex_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SeatIndex = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家轮休通知
  /// </summary>
  public partial class Actor_FiveStar_PlayerRest : pb::IMessage {
    private static readonly pb::MessageParser<Actor_FiveStar_PlayerRest> _parser = new pb::MessageParser<Actor_FiveStar_PlayerRest>(() => (Actor_FiveStar_PlayerRest)MessagePool.Instance.Fetch(typeof(Actor_FiveStar_PlayerRest)));
    public static pb::MessageParser<Actor_FiveStar_PlayerRest> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int restSeatIndex_;
    /// <summary>
    ///休息玩家的索引
    /// </summary>
    public int RestSeatIndex {
      get { return restSeatIndex_; }
      set {
        restSeatIndex_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RestSeatIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RestSeatIndex);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (RestSeatIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RestSeatIndex);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      restSeatIndex_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RestSeatIndex = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家4人局 索引回归正常通知
  /// </summary>
  public partial class Actor_FiveStar_NormalSeatIndex : pb::IMessage {
    private static readonly pb::MessageParser<Actor_FiveStar_NormalSeatIndex> _parser = new pb::MessageParser<Actor_FiveStar_NormalSeatIndex>(() => (Actor_FiveStar_NormalSeatIndex)MessagePool.Instance.Fetch(typeof(Actor_FiveStar_NormalSeatIndex)));
    public static pb::MessageParser<Actor_FiveStar_NormalSeatIndex> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private static readonly pb::FieldCodec<long> _repeated_newIndexInUser_codec
        = pb::FieldCodec.ForInt64(10);
    private pbc::RepeatedField<long> newIndexInUser_ = new pbc::RepeatedField<long>();
    /// <summary>
    ///新玩家索引对应UserId
    /// </summary>
    public pbc::RepeatedField<long> NewIndexInUser {
      get { return newIndexInUser_; }
      set { newIndexInUser_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      newIndexInUser_.WriteTo(output, _repeated_newIndexInUser_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      size += newIndexInUser_.CalculateSize(_repeated_newIndexInUser_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      newIndexInUser_.Clear();
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            newIndexInUser_.AddEntriesFrom(input, _repeated_newIndexInUser_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///发牌通知
  /// </summary>
  public partial class Actor_FiveStar_Deal : pb::IMessage {
    private static readonly pb::MessageParser<Actor_FiveStar_Deal> _parser = new pb::MessageParser<Actor_FiveStar_Deal>(() => (Actor_FiveStar_Deal)MessagePool.Instance.Fetch(typeof(Actor_FiveStar_Deal)));
    public static pb::MessageParser<Actor_FiveStar_Deal> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_cards_codec
        = pb::FieldCodec.ForInt32(10);
    private pbc::RepeatedField<int> cards_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///只有自己的牌 其他玩家的牌都是固定13张
    /// </summary>
    public pbc::RepeatedField<int> Cards {
      get { return cards_; }
      set { cards_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      cards_.WriteTo(output, _repeated_cards_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      size += cards_.CalculateSize(_repeated_cards_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      cards_.Clear();
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家买马
  /// </summary>
  public partial class Actor_FiveStar_MaiMa : pb::IMessage {
    private static readonly pb::MessageParser<Actor_FiveStar_MaiMa> _parser = new pb::MessageParser<Actor_FiveStar_MaiMa>(() => (Actor_FiveStar_MaiMa)MessagePool.Instance.Fetch(typeof(Actor_FiveStar_MaiMa)));
    public static pb::MessageParser<Actor_FiveStar_MaiMa> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int card_;
    /// <summary>
    ///买的哪一张牌
    /// </summary>
    public int Card {
      get { return card_; }
      set {
        card_ = value;
      }
    }

    private int score_;
    /// <summary>
    ///买码加的分数
    /// </summary>
    public int Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Card != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Card);
      }
      if (Score != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Score);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Card != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Card);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      card_ = 0;
      score_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Card = input.ReadInt32();
            break;
          }
          case 16: {
            Score = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///可以打漂
  /// </summary>
  public partial class Actor_FiveStar_CanDaPiao : pb::IMessage {
    private static readonly pb::MessageParser<Actor_FiveStar_CanDaPiao> _parser = new pb::MessageParser<Actor_FiveStar_CanDaPiao>(() => (Actor_FiveStar_CanDaPiao)MessagePool.Instance.Fetch(typeof(Actor_FiveStar_CanDaPiao)));
    public static pb::MessageParser<Actor_FiveStar_CanDaPiao> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int maxPiaoNum_;
    /// <summary>
    ///最大漂数
    /// </summary>
    public int MaxPiaoNum {
      get { return maxPiaoNum_; }
      set {
        maxPiaoNum_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (MaxPiaoNum != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MaxPiaoNum);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (MaxPiaoNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxPiaoNum);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      maxPiaoNum_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MaxPiaoNum = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///打漂结果
  /// </summary>
  public partial class Actor_FiveStar_DaPiaoResult : pb::IMessage {
    private static readonly pb::MessageParser<Actor_FiveStar_DaPiaoResult> _parser = new pb::MessageParser<Actor_FiveStar_DaPiaoResult>(() => (Actor_FiveStar_DaPiaoResult)MessagePool.Instance.Fetch(typeof(Actor_FiveStar_DaPiaoResult)));
    public static pb::MessageParser<Actor_FiveStar_DaPiaoResult> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int seatIndex_;
    /// <summary>
    ///玩家索引
    /// </summary>
    public int SeatIndex {
      get { return seatIndex_; }
      set {
        seatIndex_ = value;
      }
    }

    private int selectPiaoNum_;
    /// <summary>
    ///玩家选择的漂数
    /// </summary>
    public int SelectPiaoNum {
      get { return selectPiaoNum_; }
      set {
        selectPiaoNum_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (SeatIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SeatIndex);
      }
      if (SelectPiaoNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SelectPiaoNum);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (SeatIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatIndex);
      }
      if (SelectPiaoNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SelectPiaoNum);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      seatIndex_ = 0;
      selectPiaoNum_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SeatIndex = input.ReadInt32();
            break;
          }
          case 16: {
            SelectPiaoNum = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///可以进行碰杠胡
  /// </summary>
  public partial class Actor_FiveStar_CanOperate : pb::IMessage {
    private static readonly pb::MessageParser<Actor_FiveStar_CanOperate> _parser = new pb::MessageParser<Actor_FiveStar_CanOperate>(() => (Actor_FiveStar_CanOperate)MessagePool.Instance.Fetch(typeof(Actor_FiveStar_CanOperate)));
    public static pb::MessageParser<Actor_FiveStar_CanOperate> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int seatIndex_;
    /// <summary>
    ///可操作玩家索引
    /// </summary>
    public int SeatIndex {
      get { return seatIndex_; }
      set {
        seatIndex_ = value;
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_canOperateLits_codec
        = pb::FieldCodec.ForInt32(18);
    private pbc::RepeatedField<int> canOperateLits_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///可操作列表
    /// </summary>
    public pbc::RepeatedField<int> CanOperateLits {
      get { return canOperateLits_; }
      set { canOperateLits_ = value; }
    }

    private static readonly pb::FieldCodec<int> _repeated_canGangLits_codec
        = pb::FieldCodec.ForInt32(26);
    private pbc::RepeatedField<int> canGangLits_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///杠牌列表 如果可以杠的话才有
    /// </summary>
    public pbc::RepeatedField<int> CanGangLits {
      get { return canGangLits_; }
      set { canGangLits_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (SeatIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SeatIndex);
      }
      canOperateLits_.WriteTo(output, _repeated_canOperateLits_codec);
      canGangLits_.WriteTo(output, _repeated_canGangLits_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (SeatIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatIndex);
      }
      size += canOperateLits_.CalculateSize(_repeated_canOperateLits_codec);
      size += canGangLits_.CalculateSize(_repeated_canGangLits_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      seatIndex_ = 0;
      canOperateLits_.Clear();
      canGangLits_.Clear();
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SeatIndex = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            canOperateLits_.AddEntriesFrom(input, _repeated_canOperateLits_codec);
            break;
          }
          case 26:
          case 24: {
            canGangLits_.AddEntriesFrom(input, _repeated_canGangLits_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家进行碰杠胡操作
  /// </summary>
  public partial class Actor_FiveStar_OperateResult : pb::IMessage {
    private static readonly pb::MessageParser<Actor_FiveStar_OperateResult> _parser = new pb::MessageParser<Actor_FiveStar_OperateResult>(() => (Actor_FiveStar_OperateResult)MessagePool.Instance.Fetch(typeof(Actor_FiveStar_OperateResult)));
    public static pb::MessageParser<Actor_FiveStar_OperateResult> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int seatIndex_;
    /// <summary>
    ///操作玩家索引
    /// </summary>
    public int SeatIndex {
      get { return seatIndex_; }
      set {
        seatIndex_ = value;
      }
    }

    private global::ETHotfix.FiveStarOperateInfo operateInfo_;
    /// <summary>
    ///玩家操作结果
    /// </summary>
    public global::ETHotfix.FiveStarOperateInfo OperateInfo {
      get { return operateInfo_; }
      set {
        operateInfo_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (SeatIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SeatIndex);
      }
      if (operateInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(OperateInfo);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (SeatIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatIndex);
      }
      if (operateInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OperateInfo);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      seatIndex_ = 0;
      if (operateInfo_ != null) MessagePool.Instance.Recycle(operateInfo_); operateInfo_ = null;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SeatIndex = input.ReadInt32();
            break;
          }
          case 18: {
            if (operateInfo_ == null) {
              operateInfo_ = new global::ETHotfix.FiveStarOperateInfo();
            }
            input.ReadMessage(operateInfo_);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家操作信息
  /// </summary>
  public partial class FiveStarOperateInfo : pb::IMessage {
    private static readonly pb::MessageParser<FiveStarOperateInfo> _parser = new pb::MessageParser<FiveStarOperateInfo>(() => (FiveStarOperateInfo)MessagePool.Instance.Fetch(typeof(FiveStarOperateInfo)));
    public static pb::MessageParser<FiveStarOperateInfo> Parser { get { return _parser; } }

    private int card_;
    /// <summary>
    ///哪张牌
    /// </summary>
    public int Card {
      get { return card_; }
      set {
        card_ = value;
      }
    }

    private int operateType_;
    /// <summary>
    ///操作类型 1.碰 2.明杠 3.擦杠 4.放冲胡 5.自摸
    /// </summary>
    public int OperateType {
      get { return operateType_; }
      set {
        operateType_ = value;
      }
    }

    private int playCardIndex_;
    /// <summary>
    ///打出这个牌的玩家索引 暗杠和自摸胡是没有
    /// </summary>
    public int PlayCardIndex {
      get { return playCardIndex_; }
      set {
        playCardIndex_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Card != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Card);
      }
      if (OperateType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(OperateType);
      }
      if (PlayCardIndex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PlayCardIndex);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Card != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Card);
      }
      if (OperateType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OperateType);
      }
      if (PlayCardIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayCardIndex);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      card_ = 0;
      operateType_ = 0;
      playCardIndex_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Card = input.ReadInt32();
            break;
          }
          case 16: {
            OperateType = input.ReadInt32();
            break;
          }
          case 24: {
            PlayCardIndex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家亮倒 不用服务器 通知 客户端自行判断
  /// </summary>
  public partial class Actor_FiveStar_LiangDao : pb::IMessage {
    private static readonly pb::MessageParser<Actor_FiveStar_LiangDao> _parser = new pb::MessageParser<Actor_FiveStar_LiangDao>(() => (Actor_FiveStar_LiangDao)MessagePool.Instance.Fetch(typeof(Actor_FiveStar_LiangDao)));
    public static pb::MessageParser<Actor_FiveStar_LiangDao> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int seatIndex_;
    /// <summary>
    ///操作玩家索引
    /// </summary>
    public int SeatIndex {
      get { return seatIndex_; }
      set {
        seatIndex_ = value;
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_hnads_codec
        = pb::FieldCodec.ForInt32(18);
    private pbc::RepeatedField<int> hnads_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///亮倒的手牌
    /// </summary>
    public pbc::RepeatedField<int> Hnads {
      get { return hnads_; }
      set { hnads_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (SeatIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SeatIndex);
      }
      hnads_.WriteTo(output, _repeated_hnads_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (SeatIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatIndex);
      }
      size += hnads_.CalculateSize(_repeated_hnads_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      seatIndex_ = 0;
      hnads_.Clear();
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SeatIndex = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            hnads_.AddEntriesFrom(input, _repeated_hnads_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///可以出牌
  /// </summary>
  public partial class Actor_FiveStar_CanPlayCard : pb::IMessage {
    private static readonly pb::MessageParser<Actor_FiveStar_CanPlayCard> _parser = new pb::MessageParser<Actor_FiveStar_CanPlayCard>(() => (Actor_FiveStar_CanPlayCard)MessagePool.Instance.Fetch(typeof(Actor_FiveStar_CanPlayCard)));
    public static pb::MessageParser<Actor_FiveStar_CanPlayCard> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int seatIndex_;
    /// <summary>
    ///可以出牌玩家索引
    /// </summary>
    public int SeatIndex {
      get { return seatIndex_; }
      set {
        seatIndex_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (SeatIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SeatIndex);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (SeatIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatIndex);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      seatIndex_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SeatIndex = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家出牌结果
  /// </summary>
  public partial class Actor_FiveStar_PlayCardResult : pb::IMessage {
    private static readonly pb::MessageParser<Actor_FiveStar_PlayCardResult> _parser = new pb::MessageParser<Actor_FiveStar_PlayCardResult>(() => (Actor_FiveStar_PlayCardResult)MessagePool.Instance.Fetch(typeof(Actor_FiveStar_PlayCardResult)));
    public static pb::MessageParser<Actor_FiveStar_PlayCardResult> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int seatIndex_;
    /// <summary>
    ///出牌玩家索引
    /// </summary>
    public int SeatIndex {
      get { return seatIndex_; }
      set {
        seatIndex_ = value;
      }
    }

    private int card_;
    /// <summary>
    ///出的哪张牌
    /// </summary>
    public int Card {
      get { return card_; }
      set {
        card_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (SeatIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SeatIndex);
      }
      if (Card != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Card);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (SeatIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatIndex);
      }
      if (Card != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Card);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      seatIndex_ = 0;
      card_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SeatIndex = input.ReadInt32();
            break;
          }
          case 16: {
            Card = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家摸牌
  /// </summary>
  public partial class Actor_FiveStar_MoPai : pb::IMessage {
    private static readonly pb::MessageParser<Actor_FiveStar_MoPai> _parser = new pb::MessageParser<Actor_FiveStar_MoPai>(() => (Actor_FiveStar_MoPai)MessagePool.Instance.Fetch(typeof(Actor_FiveStar_MoPai)));
    public static pb::MessageParser<Actor_FiveStar_MoPai> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int seatIndex_;
    /// <summary>
    ///摸牌玩家索引
    /// </summary>
    public int SeatIndex {
      get { return seatIndex_; }
      set {
        seatIndex_ = value;
      }
    }

    private int card_;
    /// <summary>
    ///摸的哪张牌
    /// </summary>
    public int Card {
      get { return card_; }
      set {
        card_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (SeatIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SeatIndex);
      }
      if (Card != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Card);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (SeatIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatIndex);
      }
      if (Card != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Card);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      seatIndex_ = 0;
      card_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SeatIndex = input.ReadInt32();
            break;
          }
          case 16: {
            Card = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///刷新玩家手牌信息 每次出牌玩家都会收到
  /// </summary>
  public partial class Actor_FiveStar_NewestHands : pb::IMessage {
    private static readonly pb::MessageParser<Actor_FiveStar_NewestHands> _parser = new pb::MessageParser<Actor_FiveStar_NewestHands>(() => (Actor_FiveStar_NewestHands)MessagePool.Instance.Fetch(typeof(Actor_FiveStar_NewestHands)));
    public static pb::MessageParser<Actor_FiveStar_NewestHands> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_hands_codec
        = pb::FieldCodec.ForInt32(10);
    private pbc::RepeatedField<int> hands_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///手牌信息
    /// </summary>
    public pbc::RepeatedField<int> Hands {
      get { return hands_; }
      set { hands_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      hands_.WriteTo(output, _repeated_hands_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      size += hands_.CalculateSize(_repeated_hands_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      hands_.Clear();
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            hands_.AddEntriesFrom(input, _repeated_hands_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///打牌过分中分数变化 一般只有杠牌才有
  /// </summary>
  public partial class Actor_FiveStar_ScoreChange : pb::IMessage {
    private static readonly pb::MessageParser<Actor_FiveStar_ScoreChange> _parser = new pb::MessageParser<Actor_FiveStar_ScoreChange>(() => (Actor_FiveStar_ScoreChange)MessagePool.Instance.Fetch(typeof(Actor_FiveStar_ScoreChange)));
    public static pb::MessageParser<Actor_FiveStar_ScoreChange> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_getScore_codec
        = pb::FieldCodec.ForInt32(10);
    private pbc::RepeatedField<int> getScore_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///玩家的得分 顺序按玩家的索引顺序
    /// </summary>
    public pbc::RepeatedField<int> GetScore {
      get { return getScore_; }
      set { getScore_ = value; }
    }

    private static readonly pb::FieldCodec<int> _repeated_nowScore_codec
        = pb::FieldCodec.ForInt32(18);
    private pbc::RepeatedField<int> nowScore_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///玩家的现有分数
    /// </summary>
    public pbc::RepeatedField<int> NowScore {
      get { return nowScore_; }
      set { nowScore_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      getScore_.WriteTo(output, _repeated_getScore_codec);
      nowScore_.WriteTo(output, _repeated_nowScore_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      size += getScore_.CalculateSize(_repeated_getScore_codec);
      size += nowScore_.CalculateSize(_repeated_nowScore_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      getScore_.Clear();
      nowScore_.Clear();
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            getScore_.AddEntriesFrom(input, _repeated_getScore_codec);
            break;
          }
          case 18:
          case 16: {
            nowScore_.AddEntriesFrom(input, _repeated_nowScore_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///小结算
  /// </summary>
  public partial class Actor_FiveStar_SmallResult : pb::IMessage {
    private static readonly pb::MessageParser<Actor_FiveStar_SmallResult> _parser = new pb::MessageParser<Actor_FiveStar_SmallResult>(() => (Actor_FiveStar_SmallResult)MessagePool.Instance.Fetch(typeof(Actor_FiveStar_SmallResult)));
    public static pb::MessageParser<Actor_FiveStar_SmallResult> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.FiveStar_SmallPlayerResult> _repeated_smallPlayerResults_codec
        = pb::FieldCodec.ForMessage(10, global::ETHotfix.FiveStar_SmallPlayerResult.Parser);
    private pbc::RepeatedField<global::ETHotfix.FiveStar_SmallPlayerResult> smallPlayerResults_ = new pbc::RepeatedField<global::ETHotfix.FiveStar_SmallPlayerResult>();
    /// <summary>
    ///小局结算玩家信息
    /// </summary>
    public pbc::RepeatedField<global::ETHotfix.FiveStar_SmallPlayerResult> SmallPlayerResults {
      get { return smallPlayerResults_; }
      set { smallPlayerResults_ = value; }
    }

    private int maiMaCard_;
    /// <summary>
    ///买马买的哪一张牌
    /// </summary>
    public int MaiMaCard {
      get { return maiMaCard_; }
      set {
        maiMaCard_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      smallPlayerResults_.WriteTo(output, _repeated_smallPlayerResults_codec);
      if (MaiMaCard != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MaiMaCard);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      size += smallPlayerResults_.CalculateSize(_repeated_smallPlayerResults_codec);
      if (MaiMaCard != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaiMaCard);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < smallPlayerResults_.Count; i++) { MessagePool.Instance.Recycle(smallPlayerResults_[i]); }
      smallPlayerResults_.Clear();
      maiMaCard_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            smallPlayerResults_.AddEntriesFrom(input, _repeated_smallPlayerResults_codec);
            break;
          }
          case 16: {
            MaiMaCard = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///单个玩家小局结算结果
  /// </summary>
  public partial class FiveStar_SmallPlayerResult : pb::IMessage {
    private static readonly pb::MessageParser<FiveStar_SmallPlayerResult> _parser = new pb::MessageParser<FiveStar_SmallPlayerResult>(() => (FiveStar_SmallPlayerResult)MessagePool.Instance.Fetch(typeof(FiveStar_SmallPlayerResult)));
    public static pb::MessageParser<FiveStar_SmallPlayerResult> Parser { get { return _parser; } }

    private int seatIndex_;
    /// <summary>
    ///玩家索引
    /// </summary>
    public int SeatIndex {
      get { return seatIndex_; }
      set {
        seatIndex_ = value;
      }
    }

    private int playerResultType_;
    /// <summary>
    ///玩家结算类型 (1.胡牌 2.放冲 0.什么都没干)
    /// </summary>
    public int PlayerResultType {
      get { return playerResultType_; }
      set {
        playerResultType_ = value;
      }
    }

    private int getScore_;
    /// <summary>
    ///玩家得分
    /// </summary>
    public int GetScore {
      get { return getScore_; }
      set {
        getScore_ = value;
      }
    }

    private int samllGangPaiScore_;
    /// <summary>
    ///杠牌得分
    /// </summary>
    public int SamllGangPaiScore {
      get { return samllGangPaiScore_; }
      set {
        samllGangPaiScore_ = value;
      }
    }

    private int nowScore_;
    /// <summary>
    ///玩家现在分数
    /// </summary>
    public int NowScore {
      get { return nowScore_; }
      set {
        nowScore_ = value;
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_hands_codec
        = pb::FieldCodec.ForInt32(50);
    private pbc::RepeatedField<int> hands_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///玩家手牌
    /// </summary>
    public pbc::RepeatedField<int> Hands {
      get { return hands_; }
      set { hands_ = value; }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.FiveStarOperateInfo> _repeated_pengGangInfos_codec
        = pb::FieldCodec.ForMessage(74, global::ETHotfix.FiveStarOperateInfo.Parser);
    private pbc::RepeatedField<global::ETHotfix.FiveStarOperateInfo> pengGangInfos_ = new pbc::RepeatedField<global::ETHotfix.FiveStarOperateInfo>();
    /// <summary>
    ///碰杠信息
    /// </summary>
    public pbc::RepeatedField<global::ETHotfix.FiveStarOperateInfo> PengGangInfos {
      get { return pengGangInfos_; }
      set { pengGangInfos_ = value; }
    }

    private static readonly pb::FieldCodec<int> _repeated_huPaiTypes_codec
        = pb::FieldCodec.ForInt32(58);
    private pbc::RepeatedField<int> huPaiTypes_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///胡牌类型 包含亮倒没胡赔付 和查叫赔付
    /// </summary>
    public pbc::RepeatedField<int> HuPaiTypes {
      get { return huPaiTypes_; }
      set { huPaiTypes_ = value; }
    }

    private int winCard_;
    /// <summary>
    ///赢的哪张牌 只有赢得人才有
    /// </summary>
    public int WinCard {
      get { return winCard_; }
      set {
        winCard_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (SeatIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SeatIndex);
      }
      if (PlayerResultType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PlayerResultType);
      }
      if (GetScore != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(GetScore);
      }
      if (SamllGangPaiScore != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SamllGangPaiScore);
      }
      if (NowScore != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(NowScore);
      }
      hands_.WriteTo(output, _repeated_hands_codec);
      huPaiTypes_.WriteTo(output, _repeated_huPaiTypes_codec);
      if (WinCard != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(WinCard);
      }
      pengGangInfos_.WriteTo(output, _repeated_pengGangInfos_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (SeatIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatIndex);
      }
      if (PlayerResultType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerResultType);
      }
      if (GetScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GetScore);
      }
      if (SamllGangPaiScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SamllGangPaiScore);
      }
      if (NowScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NowScore);
      }
      size += hands_.CalculateSize(_repeated_hands_codec);
      size += pengGangInfos_.CalculateSize(_repeated_pengGangInfos_codec);
      size += huPaiTypes_.CalculateSize(_repeated_huPaiTypes_codec);
      if (WinCard != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WinCard);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      seatIndex_ = 0;
      playerResultType_ = 0;
      getScore_ = 0;
      samllGangPaiScore_ = 0;
      nowScore_ = 0;
      hands_.Clear();
      huPaiTypes_.Clear();
      winCard_ = 0;
      for (int i = 0; i < pengGangInfos_.Count; i++) { MessagePool.Instance.Recycle(pengGangInfos_[i]); }
      pengGangInfos_.Clear();
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SeatIndex = input.ReadInt32();
            break;
          }
          case 16: {
            PlayerResultType = input.ReadInt32();
            break;
          }
          case 24: {
            GetScore = input.ReadInt32();
            break;
          }
          case 32: {
            SamllGangPaiScore = input.ReadInt32();
            break;
          }
          case 40: {
            NowScore = input.ReadInt32();
            break;
          }
          case 50:
          case 48: {
            hands_.AddEntriesFrom(input, _repeated_hands_codec);
            break;
          }
          case 58:
          case 56: {
            huPaiTypes_.AddEntriesFrom(input, _repeated_huPaiTypes_codec);
            break;
          }
          case 64: {
            WinCard = input.ReadInt32();
            break;
          }
          case 74: {
            pengGangInfos_.AddEntriesFrom(input, _repeated_pengGangInfos_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///总结算
  /// </summary>
  public partial class Actor_FiveStar_TotalResult : pb::IMessage {
    private static readonly pb::MessageParser<Actor_FiveStar_TotalResult> _parser = new pb::MessageParser<Actor_FiveStar_TotalResult>(() => (Actor_FiveStar_TotalResult)MessagePool.Instance.Fetch(typeof(Actor_FiveStar_TotalResult)));
    public static pb::MessageParser<Actor_FiveStar_TotalResult> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.FiveStarTotalPlayerResult> _repeated_totalPlayerResults_codec
        = pb::FieldCodec.ForMessage(10, global::ETHotfix.FiveStarTotalPlayerResult.Parser);
    private pbc::RepeatedField<global::ETHotfix.FiveStarTotalPlayerResult> totalPlayerResults_ = new pbc::RepeatedField<global::ETHotfix.FiveStarTotalPlayerResult>();
    /// <summary>
    ///总结算玩家信息
    /// </summary>
    public pbc::RepeatedField<global::ETHotfix.FiveStarTotalPlayerResult> TotalPlayerResults {
      get { return totalPlayerResults_; }
      set { totalPlayerResults_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      totalPlayerResults_.WriteTo(output, _repeated_totalPlayerResults_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      size += totalPlayerResults_.CalculateSize(_repeated_totalPlayerResults_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < totalPlayerResults_.Count; i++) { MessagePool.Instance.Recycle(totalPlayerResults_[i]); }
      totalPlayerResults_.Clear();
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            totalPlayerResults_.AddEntriesFrom(input, _repeated_totalPlayerResults_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///单个玩家总结算结果
  /// </summary>
  public partial class FiveStarTotalPlayerResult : pb::IMessage {
    private static readonly pb::MessageParser<FiveStarTotalPlayerResult> _parser = new pb::MessageParser<FiveStarTotalPlayerResult>(() => (FiveStarTotalPlayerResult)MessagePool.Instance.Fetch(typeof(FiveStarTotalPlayerResult)));
    public static pb::MessageParser<FiveStarTotalPlayerResult> Parser { get { return _parser; } }

    private int seatIndex_;
    /// <summary>
    ///玩家索引
    /// </summary>
    public int SeatIndex {
      get { return seatIndex_; }
      set {
        seatIndex_ = value;
      }
    }

    private int huPaiCount_;
    /// <summary>
    ///胡牌次数
    /// </summary>
    public int HuPaiCount {
      get { return huPaiCount_; }
      set {
        huPaiCount_ = value;
      }
    }

    private int ziMoCount_;
    /// <summary>
    ///自摸次数
    /// </summary>
    public int ZiMoCount {
      get { return ziMoCount_; }
      set {
        ziMoCount_ = value;
      }
    }

    private int fangChongCount_;
    /// <summary>
    ///放冲次数
    /// </summary>
    public int FangChongCount {
      get { return fangChongCount_; }
      set {
        fangChongCount_ = value;
      }
    }

    private int gangPaiCount_;
    /// <summary>
    ///杠牌次数次数
    /// </summary>
    public int GangPaiCount {
      get { return gangPaiCount_; }
      set {
        gangPaiCount_ = value;
      }
    }

    private int totalSocre_;
    /// <summary>
    ///总得分
    /// </summary>
    public int TotalSocre {
      get { return totalSocre_; }
      set {
        totalSocre_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (SeatIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SeatIndex);
      }
      if (HuPaiCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(HuPaiCount);
      }
      if (ZiMoCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ZiMoCount);
      }
      if (FangChongCount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(FangChongCount);
      }
      if (GangPaiCount != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(GangPaiCount);
      }
      if (TotalSocre != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(TotalSocre);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (SeatIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatIndex);
      }
      if (HuPaiCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HuPaiCount);
      }
      if (ZiMoCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ZiMoCount);
      }
      if (FangChongCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FangChongCount);
      }
      if (GangPaiCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GangPaiCount);
      }
      if (TotalSocre != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalSocre);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      seatIndex_ = 0;
      huPaiCount_ = 0;
      ziMoCount_ = 0;
      fangChongCount_ = 0;
      gangPaiCount_ = 0;
      totalSocre_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SeatIndex = input.ReadInt32();
            break;
          }
          case 16: {
            HuPaiCount = input.ReadInt32();
            break;
          }
          case 24: {
            ZiMoCount = input.ReadInt32();
            break;
          }
          case 32: {
            FangChongCount = input.ReadInt32();
            break;
          }
          case 40: {
            GangPaiCount = input.ReadInt32();
            break;
          }
          case 48: {
            TotalSocre = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///托管状态改变
  /// </summary>
  public partial class Actor_FiveStar_CollocationChange : pb::IMessage {
    private static readonly pb::MessageParser<Actor_FiveStar_CollocationChange> _parser = new pb::MessageParser<Actor_FiveStar_CollocationChange>(() => (Actor_FiveStar_CollocationChange)MessagePool.Instance.Fetch(typeof(Actor_FiveStar_CollocationChange)));
    public static pb::MessageParser<Actor_FiveStar_CollocationChange> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private bool isCollocation_;
    /// <summary>
    ///是否托管
    /// </summary>
    public bool IsCollocation {
      get { return isCollocation_; }
      set {
        isCollocation_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (IsCollocation != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsCollocation);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (IsCollocation != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      isCollocation_ = false;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsCollocation = input.ReadBool();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///重连数据
  /// </summary>
  public partial class Actor_FiveStar_Reconnection : pb::IMessage {
    private static readonly pb::MessageParser<Actor_FiveStar_Reconnection> _parser = new pb::MessageParser<Actor_FiveStar_Reconnection>(() => (Actor_FiveStar_Reconnection)MessagePool.Instance.Fetch(typeof(Actor_FiveStar_Reconnection)));
    public static pb::MessageParser<Actor_FiveStar_Reconnection> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.FiveStarPlayer> _repeated_players_codec
        = pb::FieldCodec.ForMessage(10, global::ETHotfix.FiveStarPlayer.Parser);
    private pbc::RepeatedField<global::ETHotfix.FiveStarPlayer> players_ = new pbc::RepeatedField<global::ETHotfix.FiveStarPlayer>();
    /// <summary>
    ///所有玩家信息
    /// </summary>
    public pbc::RepeatedField<global::ETHotfix.FiveStarPlayer> Players {
      get { return players_; }
      set { players_ = value; }
    }

    private int roomId_;
    /// <summary>
    ///房间ID
    /// </summary>
    public int RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    private int friendsCircleId_;
    /// <summary>
    ///对应的亲友圈id
    /// </summary>
    public int FriendsCircleId {
      get { return friendsCircleId_; }
      set {
        friendsCircleId_ = value;
      }
    }

    private int roomType_;
    /// <summary>
    ///房间类型
    /// </summary>
    public int RoomType {
      get { return roomType_; }
      set {
        roomType_ = value;
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_configs_codec
        = pb::FieldCodec.ForInt32(42);
    private pbc::RepeatedField<int> configs_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///房间配置信息
    /// </summary>
    public pbc::RepeatedField<int> Configs {
      get { return configs_; }
      set { configs_ = value; }
    }

    private int currRestSeatIndex_;
    /// <summary>
    ///当前休息顽家的索引 只有4人房才有
    /// </summary>
    public int CurrRestSeatIndex {
      get { return currRestSeatIndex_; }
      set {
        currRestSeatIndex_ = value;
      }
    }

    private int currRoomStateType_;
    /// <summary>
    ///当前房间的状态
    /// </summary>
    public int CurrRoomStateType {
      get { return currRoomStateType_; }
      set {
        currRoomStateType_ = value;
      }
    }

    private int residueCardCount_;
    /// <summary>
    ///剩余牌的数量
    /// </summary>
    public int ResidueCardCount {
      get { return residueCardCount_; }
      set {
        residueCardCount_ = value;
      }
    }

    private bool isDaPiaoBeing_;
    /// <summary>
    ///是否在打漂中
    /// </summary>
    public bool IsDaPiaoBeing {
      get { return isDaPiaoBeing_; }
      set {
        isDaPiaoBeing_ = value;
      }
    }

    private int endPlayCardSize_;
    /// <summary>
    ///最后出的哪一张
    /// </summary>
    public int EndPlayCardSize {
      get { return endPlayCardSize_; }
      set {
        endPlayCardSize_ = value;
      }
    }

    private int currOfficNum_;
    /// <summary>
    ///当前局数
    /// </summary>
    public int CurrOfficNum {
      get { return currOfficNum_; }
      set {
        currOfficNum_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      players_.WriteTo(output, _repeated_players_codec);
      if (RoomId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RoomId);
      }
      if (FriendsCircleId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FriendsCircleId);
      }
      if (RoomType != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(RoomType);
      }
      configs_.WriteTo(output, _repeated_configs_codec);
      if (CurrRestSeatIndex != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(CurrRestSeatIndex);
      }
      if (CurrRoomStateType != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(CurrRoomStateType);
      }
      if (ResidueCardCount != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(ResidueCardCount);
      }
      if (IsDaPiaoBeing != false) {
        output.WriteRawTag(72);
        output.WriteBool(IsDaPiaoBeing);
      }
      if (EndPlayCardSize != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(EndPlayCardSize);
      }
      if (CurrOfficNum != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(CurrOfficNum);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      size += players_.CalculateSize(_repeated_players_codec);
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomId);
      }
      if (FriendsCircleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FriendsCircleId);
      }
      if (RoomType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomType);
      }
      size += configs_.CalculateSize(_repeated_configs_codec);
      if (CurrRestSeatIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrRestSeatIndex);
      }
      if (CurrRoomStateType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrRoomStateType);
      }
      if (ResidueCardCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ResidueCardCount);
      }
      if (IsDaPiaoBeing != false) {
        size += 1 + 1;
      }
      if (EndPlayCardSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndPlayCardSize);
      }
      if (CurrOfficNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrOfficNum);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < players_.Count; i++) { MessagePool.Instance.Recycle(players_[i]); }
      players_.Clear();
      roomId_ = 0;
      friendsCircleId_ = 0;
      roomType_ = 0;
      configs_.Clear();
      currRestSeatIndex_ = 0;
      currRoomStateType_ = 0;
      residueCardCount_ = 0;
      isDaPiaoBeing_ = false;
      endPlayCardSize_ = 0;
      currOfficNum_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            players_.AddEntriesFrom(input, _repeated_players_codec);
            break;
          }
          case 16: {
            RoomId = input.ReadInt32();
            break;
          }
          case 24: {
            FriendsCircleId = input.ReadInt32();
            break;
          }
          case 32: {
            RoomType = input.ReadInt32();
            break;
          }
          case 42:
          case 40: {
            configs_.AddEntriesFrom(input, _repeated_configs_codec);
            break;
          }
          case 48: {
            CurrRestSeatIndex = input.ReadInt32();
            break;
          }
          case 56: {
            CurrRoomStateType = input.ReadInt32();
            break;
          }
          case 64: {
            ResidueCardCount = input.ReadInt32();
            break;
          }
          case 72: {
            IsDaPiaoBeing = input.ReadBool();
            break;
          }
          case 80: {
            EndPlayCardSize = input.ReadInt32();
            break;
          }
          case 88: {
            CurrOfficNum = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///卡五星玩家信息
  /// </summary>
  public partial class FiveStarPlayer : pb::IMessage {
    private static readonly pb::MessageParser<FiveStarPlayer> _parser = new pb::MessageParser<FiveStarPlayer>(() => (FiveStarPlayer)MessagePool.Instance.Fetch(typeof(FiveStarPlayer)));
    public static pb::MessageParser<FiveStarPlayer> Parser { get { return _parser; } }

    private int seatIndex_;
    /// <summary>
    ///座位索引
    /// </summary>
    public int SeatIndex {
      get { return seatIndex_; }
      set {
        seatIndex_ = value;
      }
    }

    private global::ETHotfix.User user_;
    /// <summary>
    ///用户信息
    /// </summary>
    public global::ETHotfix.User User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_playCards_codec
        = pb::FieldCodec.ForInt32(26);
    private pbc::RepeatedField<int> playCards_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///出牌信息
    /// </summary>
    public pbc::RepeatedField<int> PlayCards {
      get { return playCards_; }
      set { playCards_ = value; }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.FiveStarOperateInfo> _repeated_operateInfos_codec
        = pb::FieldCodec.ForMessage(34, global::ETHotfix.FiveStarOperateInfo.Parser);
    private pbc::RepeatedField<global::ETHotfix.FiveStarOperateInfo> operateInfos_ = new pbc::RepeatedField<global::ETHotfix.FiveStarOperateInfo>();
    /// <summary>
    ///碰杠信息
    /// </summary>
    public pbc::RepeatedField<global::ETHotfix.FiveStarOperateInfo> OperateInfos {
      get { return operateInfos_; }
      set { operateInfos_ = value; }
    }

    private int piaoNum_;
    /// <summary>
    ///漂的分数
    /// </summary>
    public int PiaoNum {
      get { return piaoNum_; }
      set {
        piaoNum_ = value;
      }
    }

    private int nowScore_;
    /// <summary>
    ///现有分数 匹配模式就是豆子数
    /// </summary>
    public int NowScore {
      get { return nowScore_; }
      set {
        nowScore_ = value;
      }
    }

    private bool isLiangDao_;
    /// <summary>
    ///是否亮倒
    /// </summary>
    public bool IsLiangDao {
      get { return isLiangDao_; }
      set {
        isLiangDao_ = value;
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_hands_codec
        = pb::FieldCodec.ForInt32(66);
    private pbc::RepeatedField<int> hands_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///手牌信息 不应该发时候数量在索引0的位置
    /// </summary>
    public pbc::RepeatedField<int> Hands {
      get { return hands_; }
      set { hands_ = value; }
    }

    private bool readyState_;
    /// <summary>
    ///玩家的准备状态
    /// </summary>
    public bool ReadyState {
      get { return readyState_; }
      set {
        readyState_ = value;
      }
    }

    private bool isAlreadyDaPiao_;
    /// <summary>
    ///是否已经打过漂了
    /// </summary>
    public bool IsAlreadyDaPiao {
      get { return isAlreadyDaPiao_; }
      set {
        isAlreadyDaPiao_ = value;
      }
    }

    private int huPaiCount_;
    /// <summary>
    ///胡牌次数
    /// </summary>
    public int HuPaiCount {
      get { return huPaiCount_; }
      set {
        huPaiCount_ = value;
      }
    }

    private int fangChongCount_;
    /// <summary>
    ///放冲次数
    /// </summary>
    public int FangChongCount {
      get { return fangChongCount_; }
      set {
        fangChongCount_ = value;
      }
    }

    private int ziMoCount_;
    /// <summary>
    ///自摸次数
    /// </summary>
    public int ZiMoCount {
      get { return ziMoCount_; }
      set {
        ziMoCount_ = value;
      }
    }

    private int gangPaiCount_;
    /// <summary>
    ///杠牌次数
    /// </summary>
    public int GangPaiCount {
      get { return gangPaiCount_; }
      set {
        gangPaiCount_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (SeatIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SeatIndex);
      }
      if (user_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(User);
      }
      playCards_.WriteTo(output, _repeated_playCards_codec);
      operateInfos_.WriteTo(output, _repeated_operateInfos_codec);
      if (PiaoNum != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(PiaoNum);
      }
      if (NowScore != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(NowScore);
      }
      if (IsLiangDao != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsLiangDao);
      }
      hands_.WriteTo(output, _repeated_hands_codec);
      if (ReadyState != false) {
        output.WriteRawTag(72);
        output.WriteBool(ReadyState);
      }
      if (IsAlreadyDaPiao != false) {
        output.WriteRawTag(80);
        output.WriteBool(IsAlreadyDaPiao);
      }
      if (HuPaiCount != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(HuPaiCount);
      }
      if (FangChongCount != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(FangChongCount);
      }
      if (ZiMoCount != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(ZiMoCount);
      }
      if (GangPaiCount != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(GangPaiCount);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (SeatIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatIndex);
      }
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      size += playCards_.CalculateSize(_repeated_playCards_codec);
      size += operateInfos_.CalculateSize(_repeated_operateInfos_codec);
      if (PiaoNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PiaoNum);
      }
      if (NowScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NowScore);
      }
      if (IsLiangDao != false) {
        size += 1 + 1;
      }
      size += hands_.CalculateSize(_repeated_hands_codec);
      if (ReadyState != false) {
        size += 1 + 1;
      }
      if (IsAlreadyDaPiao != false) {
        size += 1 + 1;
      }
      if (HuPaiCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HuPaiCount);
      }
      if (FangChongCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FangChongCount);
      }
      if (ZiMoCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ZiMoCount);
      }
      if (GangPaiCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GangPaiCount);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      seatIndex_ = 0;
      if (user_ != null) MessagePool.Instance.Recycle(user_); user_ = null;
      playCards_.Clear();
      for (int i = 0; i < operateInfos_.Count; i++) { MessagePool.Instance.Recycle(operateInfos_[i]); }
      operateInfos_.Clear();
      piaoNum_ = 0;
      nowScore_ = 0;
      isLiangDao_ = false;
      hands_.Clear();
      readyState_ = false;
      isAlreadyDaPiao_ = false;
      huPaiCount_ = 0;
      fangChongCount_ = 0;
      ziMoCount_ = 0;
      gangPaiCount_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SeatIndex = input.ReadInt32();
            break;
          }
          case 18: {
            if (user_ == null) {
              user_ = new global::ETHotfix.User();
            }
            input.ReadMessage(user_);
            break;
          }
          case 26:
          case 24: {
            playCards_.AddEntriesFrom(input, _repeated_playCards_codec);
            break;
          }
          case 34: {
            operateInfos_.AddEntriesFrom(input, _repeated_operateInfos_codec);
            break;
          }
          case 40: {
            PiaoNum = input.ReadInt32();
            break;
          }
          case 48: {
            NowScore = input.ReadInt32();
            break;
          }
          case 56: {
            IsLiangDao = input.ReadBool();
            break;
          }
          case 66:
          case 64: {
            hands_.AddEntriesFrom(input, _repeated_hands_codec);
            break;
          }
          case 72: {
            ReadyState = input.ReadBool();
            break;
          }
          case 80: {
            IsAlreadyDaPiao = input.ReadBool();
            break;
          }
          case 88: {
            HuPaiCount = input.ReadInt32();
            break;
          }
          case 96: {
            FangChongCount = input.ReadInt32();
            break;
          }
          case 104: {
            ZiMoCount = input.ReadInt32();
            break;
          }
          case 112: {
            GangPaiCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///小局游戏初始化
  /// </summary>
  public partial class Video_GameInit : pb::IMessage {
    private static readonly pb::MessageParser<Video_GameInit> _parser = new pb::MessageParser<Video_GameInit>(() => (Video_GameInit)MessagePool.Instance.Fetch(typeof(Video_GameInit)));
    public static pb::MessageParser<Video_GameInit> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<int> _repeated_roomConfigs_codec
        = pb::FieldCodec.ForInt32(10);
    private pbc::RepeatedField<int> roomConfigs_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///房间配置
    /// </summary>
    public pbc::RepeatedField<int> RoomConfigs {
      get { return roomConfigs_; }
      set { roomConfigs_ = value; }
    }

    private int roomNumber_;
    /// <summary>
    ///房间号
    /// </summary>
    public int RoomNumber {
      get { return roomNumber_; }
      set {
        roomNumber_ = value;
      }
    }

    private int officeNumber_;
    /// <summary>
    ///第几小局局数
    /// </summary>
    public int OfficeNumber {
      get { return officeNumber_; }
      set {
        officeNumber_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.Video_PlayerInfo> _repeated_playerInfos_codec
        = pb::FieldCodec.ForMessage(26, global::ETHotfix.Video_PlayerInfo.Parser);
    private pbc::RepeatedField<global::ETHotfix.Video_PlayerInfo> playerInfos_ = new pbc::RepeatedField<global::ETHotfix.Video_PlayerInfo>();
    /// <summary>
    ///玩家初始化信息
    /// </summary>
    public pbc::RepeatedField<global::ETHotfix.Video_PlayerInfo> PlayerInfos {
      get { return playerInfos_; }
      set { playerInfos_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      roomConfigs_.WriteTo(output, _repeated_roomConfigs_codec);
      if (RoomNumber != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RoomNumber);
      }
      playerInfos_.WriteTo(output, _repeated_playerInfos_codec);
      if (OfficeNumber != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(OfficeNumber);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += roomConfigs_.CalculateSize(_repeated_roomConfigs_codec);
      if (RoomNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomNumber);
      }
      if (OfficeNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OfficeNumber);
      }
      size += playerInfos_.CalculateSize(_repeated_playerInfos_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      roomConfigs_.Clear();
      roomNumber_ = 0;
      for (int i = 0; i < playerInfos_.Count; i++) { MessagePool.Instance.Recycle(playerInfos_[i]); }
      playerInfos_.Clear();
      officeNumber_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            roomConfigs_.AddEntriesFrom(input, _repeated_roomConfigs_codec);
            break;
          }
          case 16: {
            RoomNumber = input.ReadInt32();
            break;
          }
          case 26: {
            playerInfos_.AddEntriesFrom(input, _repeated_playerInfos_codec);
            break;
          }
          case 32: {
            OfficeNumber = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class Video_PlayerInfo : pb::IMessage {
    private static readonly pb::MessageParser<Video_PlayerInfo> _parser = new pb::MessageParser<Video_PlayerInfo>(() => (Video_PlayerInfo)MessagePool.Instance.Fetch(typeof(Video_PlayerInfo)));
    public static pb::MessageParser<Video_PlayerInfo> Parser { get { return _parser; } }

    private int nowScore_;
    /// <summary>
    ///当前分数
    /// </summary>
    public int NowScore {
      get { return nowScore_; }
      set {
        nowScore_ = value;
      }
    }

    private string name_ = "";
    /// <summary>
    ///玩家的名字
    /// </summary>
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string icon_ = "";
    /// <summary>
    ///玩家的头像
    /// </summary>
    public string Icon {
      get { return icon_; }
      set {
        icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_hands_codec
        = pb::FieldCodec.ForInt32(34);
    private pbc::RepeatedField<int> hands_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///初始化手牌信息
    /// </summary>
    public pbc::RepeatedField<int> Hands {
      get { return hands_; }
      set { hands_ = value; }
    }

    private int piaoFen_;
    /// <summary>
    ///漂分
    /// </summary>
    public int PiaoFen {
      get { return piaoFen_; }
      set {
        piaoFen_ = value;
      }
    }

    private long userId_;
    /// <summary>
    ///用户ID
    /// </summary>
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private int seatIndex_;
    /// <summary>
    ///玩家索引
    /// </summary>
    public int SeatIndex {
      get { return seatIndex_; }
      set {
        seatIndex_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (NowScore != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NowScore);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Icon.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Icon);
      }
      hands_.WriteTo(output, _repeated_hands_codec);
      if (PiaoFen != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(PiaoFen);
      }
      if (UserId != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(UserId);
      }
      if (SeatIndex != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(SeatIndex);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (NowScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NowScore);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Icon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
      }
      size += hands_.CalculateSize(_repeated_hands_codec);
      if (PiaoFen != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PiaoFen);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (SeatIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatIndex);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      nowScore_ = 0;
      name_ = "";
      icon_ = "";
      hands_.Clear();
      piaoFen_ = 0;
      userId_ = 0;
      seatIndex_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NowScore = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Icon = input.ReadString();
            break;
          }
          case 34:
          case 32: {
            hands_.AddEntriesFrom(input, _repeated_hands_codec);
            break;
          }
          case 40: {
            PiaoFen = input.ReadInt32();
            break;
          }
          case 48: {
            UserId = input.ReadInt64();
            break;
          }
          case 56: {
            SeatIndex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
