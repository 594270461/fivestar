// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UserMessage.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace ETHotfix {

  #region Messages
  /// <summary>
  ///设置封号 和解封
  /// </summary>
  public partial class C2U_SetIsStopSeal : pb::IMessage {
    private static readonly pb::MessageParser<C2U_SetIsStopSeal> _parser = new pb::MessageParser<C2U_SetIsStopSeal>(() => (C2U_SetIsStopSeal)MessagePool.Instance.Fetch(typeof(C2U_SetIsStopSeal)));
    public static pb::MessageParser<C2U_SetIsStopSeal> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private string account_ = "";
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string password_ = "";
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private global::ETHotfix.StopSealRecord stopSeal_;
    /// <summary>
    ///封号信息
    /// </summary>
    public global::ETHotfix.StopSealRecord StopSeal {
      get { return stopSeal_; }
      set {
        stopSeal_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (stopSeal_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(StopSeal);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(UserId);
      }
      if (Account.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Account);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(234, 5);
        output.WriteString(Password);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (UserId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (Account.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Password.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (stopSeal_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StopSeal);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (stopSeal_ != null) MessagePool.Instance.Recycle(stopSeal_); stopSeal_ = null;
      rpcId_ = 0;
      userId_ = 0;
      account_ = "";
      password_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (stopSeal_ == null) {
              stopSeal_ = new global::ETHotfix.StopSealRecord();
            }
            input.ReadMessage(stopSeal_);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            UserId = input.ReadInt64();
            break;
          }
          case 738: {
            Account = input.ReadString();
            break;
          }
          case 746: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class U2C_SetIsStopSeal : pb::IMessage {
    private static readonly pb::MessageParser<U2C_SetIsStopSeal> _parser = new pb::MessageParser<U2C_SetIsStopSeal>(() => (U2C_SetIsStopSeal)MessagePool.Instance.Fetch(typeof(U2C_SetIsStopSeal)));
    public static pb::MessageParser<U2C_SetIsStopSeal> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///更改用户 物品
  /// </summary>
  public partial class C2U_ChangeUserGoods : pb::IMessage {
    private static readonly pb::MessageParser<C2U_ChangeUserGoods> _parser = new pb::MessageParser<C2U_ChangeUserGoods>(() => (C2U_ChangeUserGoods)MessagePool.Instance.Fetch(typeof(C2U_ChangeUserGoods)));
    public static pb::MessageParser<C2U_ChangeUserGoods> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private string account_ = "";
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string password_ = "";
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long changeUserUserId_;
    /// <summary>
    ///更改用户的UserId
    /// </summary>
    public long ChangeUserUserId {
      get { return changeUserUserId_; }
      set {
        changeUserUserId_ = value;
      }
    }

    private long goodsId_;
    /// <summary>
    ///物品id
    /// </summary>
    public long GoodsId {
      get { return goodsId_; }
      set {
        goodsId_ = value;
      }
    }

    private int amount_;
    /// <summary>
    ///物品数量
    /// </summary>
    public int Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ChangeUserUserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ChangeUserUserId);
      }
      if (GoodsId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(GoodsId);
      }
      if (Amount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Amount);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(UserId);
      }
      if (Account.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Account);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(234, 5);
        output.WriteString(Password);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (UserId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (Account.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Password.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (ChangeUserUserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ChangeUserUserId);
      }
      if (GoodsId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GoodsId);
      }
      if (Amount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Amount);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      changeUserUserId_ = 0;
      goodsId_ = 0;
      amount_ = 0;
      rpcId_ = 0;
      userId_ = 0;
      account_ = "";
      password_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ChangeUserUserId = input.ReadInt64();
            break;
          }
          case 16: {
            GoodsId = input.ReadInt64();
            break;
          }
          case 24: {
            Amount = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            UserId = input.ReadInt64();
            break;
          }
          case 738: {
            Account = input.ReadString();
            break;
          }
          case 746: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class U2C_ChangeUserGoods : pb::IMessage {
    private static readonly pb::MessageParser<U2C_ChangeUserGoods> _parser = new pb::MessageParser<U2C_ChangeUserGoods>(() => (U2C_ChangeUserGoods)MessagePool.Instance.Fetch(typeof(U2C_ChangeUserGoods)));
    public static pb::MessageParser<U2C_ChangeUserGoods> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取在线人数
  /// </summary>
  public partial class C2U_GetOnLineNumber : pb::IMessage {
    private static readonly pb::MessageParser<C2U_GetOnLineNumber> _parser = new pb::MessageParser<C2U_GetOnLineNumber>(() => (C2U_GetOnLineNumber)MessagePool.Instance.Fetch(typeof(C2U_GetOnLineNumber)));
    public static pb::MessageParser<C2U_GetOnLineNumber> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private string account_ = "";
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string password_ = "";
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(UserId);
      }
      if (Account.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Account);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(234, 5);
        output.WriteString(Password);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (UserId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (Account.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Password.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      userId_ = 0;
      account_ = "";
      password_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            UserId = input.ReadInt64();
            break;
          }
          case 738: {
            Account = input.ReadString();
            break;
          }
          case 746: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class U2C_GetOnLineNumber : pb::IMessage {
    private static readonly pb::MessageParser<U2C_GetOnLineNumber> _parser = new pb::MessageParser<U2C_GetOnLineNumber>(() => (U2C_GetOnLineNumber)MessagePool.Instance.Fetch(typeof(U2C_GetOnLineNumber)));
    public static pb::MessageParser<U2C_GetOnLineNumber> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int onLineNumber_;
    /// <summary>
    ///在线人数
    /// </summary>
    public int OnLineNumber {
      get { return onLineNumber_; }
      set {
        onLineNumber_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (OnLineNumber != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(OnLineNumber);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (OnLineNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OnLineNumber);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      onLineNumber_ = 0;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            OnLineNumber = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取用户交易记录
  /// </summary>
  public partial class C2U_GetGoodsDealRecord : pb::IMessage {
    private static readonly pb::MessageParser<C2U_GetGoodsDealRecord> _parser = new pb::MessageParser<C2U_GetGoodsDealRecord>(() => (C2U_GetGoodsDealRecord)MessagePool.Instance.Fetch(typeof(C2U_GetGoodsDealRecord)));
    public static pb::MessageParser<C2U_GetGoodsDealRecord> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private string account_ = "";
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string password_ = "";
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long dealRecordUserId_;
    public long DealRecordUserId {
      get { return dealRecordUserId_; }
      set {
        dealRecordUserId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (DealRecordUserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(DealRecordUserId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(UserId);
      }
      if (Account.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Account);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(234, 5);
        output.WriteString(Password);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (UserId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (Account.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Password.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (DealRecordUserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DealRecordUserId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      dealRecordUserId_ = 0;
      rpcId_ = 0;
      userId_ = 0;
      account_ = "";
      password_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DealRecordUserId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            UserId = input.ReadInt64();
            break;
          }
          case 738: {
            Account = input.ReadString();
            break;
          }
          case 746: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class U2C_GetGoodsDealRecord : pb::IMessage {
    private static readonly pb::MessageParser<U2C_GetGoodsDealRecord> _parser = new pb::MessageParser<U2C_GetGoodsDealRecord>(() => (U2C_GetGoodsDealRecord)MessagePool.Instance.Fetch(typeof(U2C_GetGoodsDealRecord)));
    public static pb::MessageParser<U2C_GetGoodsDealRecord> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.GoodsDealRecord> _repeated_goodsDealRecords_codec
        = pb::FieldCodec.ForMessage(10, global::ETHotfix.GoodsDealRecord.Parser);
    private pbc::RepeatedField<global::ETHotfix.GoodsDealRecord> goodsDealRecords_ = new pbc::RepeatedField<global::ETHotfix.GoodsDealRecord>();
    /// <summary>
    ///交易记录
    /// </summary>
    public pbc::RepeatedField<global::ETHotfix.GoodsDealRecord> GoodsDealRecords {
      get { return goodsDealRecords_; }
      set { goodsDealRecords_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      goodsDealRecords_.WriteTo(output, _repeated_goodsDealRecords_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += goodsDealRecords_.CalculateSize(_repeated_goodsDealRecords_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < goodsDealRecords_.Count; i++) { MessagePool.Instance.Recycle(goodsDealRecords_[i]); }
      goodsDealRecords_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            goodsDealRecords_.AddEntriesFrom(input, _repeated_goodsDealRecords_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///查询用户信息
  /// </summary>
  public partial class C2U_QueryUserInfo : pb::IMessage {
    private static readonly pb::MessageParser<C2U_QueryUserInfo> _parser = new pb::MessageParser<C2U_QueryUserInfo>(() => (C2U_QueryUserInfo)MessagePool.Instance.Fetch(typeof(C2U_QueryUserInfo)));
    public static pb::MessageParser<C2U_QueryUserInfo> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private string account_ = "";
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string password_ = "";
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long queryUserId_;
    public long QueryUserId {
      get { return queryUserId_; }
      set {
        queryUserId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (QueryUserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(QueryUserId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(UserId);
      }
      if (Account.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Account);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(234, 5);
        output.WriteString(Password);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (UserId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (Account.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Password.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (QueryUserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(QueryUserId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      queryUserId_ = 0;
      rpcId_ = 0;
      userId_ = 0;
      account_ = "";
      password_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            QueryUserId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            UserId = input.ReadInt64();
            break;
          }
          case 738: {
            Account = input.ReadString();
            break;
          }
          case 746: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class U2C_QueryUserInfo : pb::IMessage {
    private static readonly pb::MessageParser<U2C_QueryUserInfo> _parser = new pb::MessageParser<U2C_QueryUserInfo>(() => (U2C_QueryUserInfo)MessagePool.Instance.Fetch(typeof(U2C_QueryUserInfo)));
    public static pb::MessageParser<U2C_QueryUserInfo> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private global::ETHotfix.User user_;
    /// <summary>
    ///user信息
    /// </summary>
    public global::ETHotfix.User User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    private bool isStopSeal_;
    /// <summary>
    ///是否封号了
    /// </summary>
    public bool IsStopSeal {
      get { return isStopSeal_; }
      set {
        isStopSeal_ = value;
      }
    }

    private long lastLoginTime_;
    /// <summary>
    ///最后登录时间
    /// </summary>
    public long LastLoginTime {
      get { return lastLoginTime_; }
      set {
        lastLoginTime_ = value;
      }
    }

    private int agecyLv_;
    /// <summary>
    ///代理等级
    /// </summary>
    public int AgecyLv {
      get { return agecyLv_; }
      set {
        agecyLv_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (user_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(User);
      }
      if (IsStopSeal != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsStopSeal);
      }
      if (LastLoginTime != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(LastLoginTime);
      }
      if (AgecyLv != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(AgecyLv);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (IsStopSeal != false) {
        size += 1 + 1;
      }
      if (LastLoginTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastLoginTime);
      }
      if (AgecyLv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AgecyLv);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (user_ != null) MessagePool.Instance.Recycle(user_); user_ = null;
      isStopSeal_ = false;
      lastLoginTime_ = 0;
      agecyLv_ = 0;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (user_ == null) {
              user_ = new global::ETHotfix.User();
            }
            input.ReadMessage(user_);
            break;
          }
          case 16: {
            IsStopSeal = input.ReadBool();
            break;
          }
          case 24: {
            LastLoginTime = input.ReadInt64();
            break;
          }
          case 32: {
            AgecyLv = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///查询封号记录
  /// </summary>
  public partial class C2U_QueryStopSealRecord : pb::IMessage {
    private static readonly pb::MessageParser<C2U_QueryStopSealRecord> _parser = new pb::MessageParser<C2U_QueryStopSealRecord>(() => (C2U_QueryStopSealRecord)MessagePool.Instance.Fetch(typeof(C2U_QueryStopSealRecord)));
    public static pb::MessageParser<C2U_QueryStopSealRecord> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private string account_ = "";
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string password_ = "";
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long queryUserId_;
    public long QueryUserId {
      get { return queryUserId_; }
      set {
        queryUserId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (QueryUserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(QueryUserId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(UserId);
      }
      if (Account.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Account);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(234, 5);
        output.WriteString(Password);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (UserId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (Account.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Password.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (QueryUserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(QueryUserId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      queryUserId_ = 0;
      rpcId_ = 0;
      userId_ = 0;
      account_ = "";
      password_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            QueryUserId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            UserId = input.ReadInt64();
            break;
          }
          case 738: {
            Account = input.ReadString();
            break;
          }
          case 746: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class U2C_QueryStopSealRecord : pb::IMessage {
    private static readonly pb::MessageParser<U2C_QueryStopSealRecord> _parser = new pb::MessageParser<U2C_QueryStopSealRecord>(() => (U2C_QueryStopSealRecord)MessagePool.Instance.Fetch(typeof(U2C_QueryStopSealRecord)));
    public static pb::MessageParser<U2C_QueryStopSealRecord> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.StopSealRecord> _repeated_stopSealRecords_codec
        = pb::FieldCodec.ForMessage(10, global::ETHotfix.StopSealRecord.Parser);
    private pbc::RepeatedField<global::ETHotfix.StopSealRecord> stopSealRecords_ = new pbc::RepeatedField<global::ETHotfix.StopSealRecord>();
    /// <summary>
    ///封号记录
    /// </summary>
    public pbc::RepeatedField<global::ETHotfix.StopSealRecord> StopSealRecords {
      get { return stopSealRecords_; }
      set { stopSealRecords_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      stopSealRecords_.WriteTo(output, _repeated_stopSealRecords_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += stopSealRecords_.CalculateSize(_repeated_stopSealRecords_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < stopSealRecords_.Count; i++) { MessagePool.Instance.Recycle(stopSealRecords_[i]); }
      stopSealRecords_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            stopSealRecords_.AddEntriesFrom(input, _repeated_stopSealRecords_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///单次封号信息
  /// </summary>
  public partial class StopSealRecord : pb::IMessage {
    private static readonly pb::MessageParser<StopSealRecord> _parser = new pb::MessageParser<StopSealRecord>(() => (StopSealRecord)MessagePool.Instance.Fetch(typeof(StopSealRecord)));
    public static pb::MessageParser<StopSealRecord> Parser { get { return _parser; } }

    private long stopSealUserId_;
    /// <summary>
    ///封号的UserId
    /// </summary>
    public long StopSealUserId {
      get { return stopSealUserId_; }
      set {
        stopSealUserId_ = value;
      }
    }

    private bool isStopSeal_;
    /// <summary>
    ///封号还是解封
    /// </summary>
    public bool IsStopSeal {
      get { return isStopSeal_; }
      set {
        isStopSeal_ = value;
      }
    }

    private string explain_ = "";
    /// <summary>
    ///解释说明
    /// </summary>
    public string Explain {
      get { return explain_; }
      set {
        explain_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long time_;
    /// <summary>
    ///封号时间
    /// </summary>
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (StopSealUserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(StopSealUserId);
      }
      if (IsStopSeal != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsStopSeal);
      }
      if (Explain.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Explain);
      }
      if (Time != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Time);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (StopSealUserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StopSealUserId);
      }
      if (IsStopSeal != false) {
        size += 1 + 1;
      }
      if (Explain.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Explain);
      }
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      stopSealUserId_ = 0;
      isStopSeal_ = false;
      explain_ = "";
      time_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            StopSealUserId = input.ReadInt64();
            break;
          }
          case 16: {
            IsStopSeal = input.ReadBool();
            break;
          }
          case 26: {
            Explain = input.ReadString();
            break;
          }
          case 32: {
            Time = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///单次用户钻石交易记录
  /// </summary>
  public partial class GoodsDealRecord : pb::IMessage {
    private static readonly pb::MessageParser<GoodsDealRecord> _parser = new pb::MessageParser<GoodsDealRecord>(() => (GoodsDealRecord)MessagePool.Instance.Fetch(typeof(GoodsDealRecord)));
    public static pb::MessageParser<GoodsDealRecord> Parser { get { return _parser; } }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private int amount_;
    public int Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    private int finishNowAmount_;
    public int FinishNowAmount {
      get { return finishNowAmount_; }
      set {
        finishNowAmount_ = value;
      }
    }

    private long time_;
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    private int type_;
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserId);
      }
      if (Amount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Amount);
      }
      if (FinishNowAmount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FinishNowAmount);
      }
      if (Time != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Time);
      }
      if (Type != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Type);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (Amount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Amount);
      }
      if (FinishNowAmount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FinishNowAmount);
      }
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      userId_ = 0;
      amount_ = 0;
      finishNowAmount_ = 0;
      time_ = 0;
      type_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadInt64();
            break;
          }
          case 16: {
            Amount = input.ReadInt32();
            break;
          }
          case 24: {
            FinishNowAmount = input.ReadInt32();
            break;
          }
          case 32: {
            Time = input.ReadInt64();
            break;
          }
          case 40: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
