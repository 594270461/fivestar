// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: JoyLandlordsMessage.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace ETHotfix {

  #region Messages
  /// <summary>
  ///开始游戏通知
  /// </summary>
  public partial class Actor_JoyLds_StartGame : pb::IMessage {
    private static readonly pb::MessageParser<Actor_JoyLds_StartGame> _parser = new pb::MessageParser<Actor_JoyLds_StartGame>(() => (Actor_JoyLds_StartGame)MessagePool.Instance.Fetch(typeof(Actor_JoyLds_StartGame)));
    public static pb::MessageParser<Actor_JoyLds_StartGame> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.JoyLds_PlayerInfo> _repeated_playerInfos_codec
        = pb::FieldCodec.ForMessage(10, global::ETHotfix.JoyLds_PlayerInfo.Parser);
    private pbc::RepeatedField<global::ETHotfix.JoyLds_PlayerInfo> playerInfos_ = new pbc::RepeatedField<global::ETHotfix.JoyLds_PlayerInfo>();
    /// <summary>
    ///开始游戏所有玩家信息
    /// </summary>
    public pbc::RepeatedField<global::ETHotfix.JoyLds_PlayerInfo> PlayerInfos {
      get { return playerInfos_; }
      set { playerInfos_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      playerInfos_.WriteTo(output, _repeated_playerInfos_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      size += playerInfos_.CalculateSize(_repeated_playerInfos_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < playerInfos_.Count; i++) { MessagePool.Instance.Recycle(playerInfos_[i]); }
      playerInfos_.Clear();
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            playerInfos_.AddEntriesFrom(input, _repeated_playerInfos_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///发牌通知
  /// </summary>
  public partial class Actor_JoyLds_Deal : pb::IMessage {
    private static readonly pb::MessageParser<Actor_JoyLds_Deal> _parser = new pb::MessageParser<Actor_JoyLds_Deal>(() => (Actor_JoyLds_Deal)MessagePool.Instance.Fetch(typeof(Actor_JoyLds_Deal)));
    public static pb::MessageParser<Actor_JoyLds_Deal> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_cards_codec
        = pb::FieldCodec.ForInt32(10);
    private pbc::RepeatedField<int> cards_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///只有自己的牌 其他玩家的牌都是固定17张
    /// </summary>
    public pbc::RepeatedField<int> Cards {
      get { return cards_; }
      set { cards_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      cards_.WriteTo(output, _repeated_cards_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      size += cards_.CalculateSize(_repeated_cards_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      cards_.Clear();
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///可以叫地主
  /// </summary>
  public partial class Actor_JoyLds_CanCallLanlord : pb::IMessage {
    private static readonly pb::MessageParser<Actor_JoyLds_CanCallLanlord> _parser = new pb::MessageParser<Actor_JoyLds_CanCallLanlord>(() => (Actor_JoyLds_CanCallLanlord)MessagePool.Instance.Fetch(typeof(Actor_JoyLds_CanCallLanlord)));
    public static pb::MessageParser<Actor_JoyLds_CanCallLanlord> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int seatIndex_;
    public int SeatIndex {
      get { return seatIndex_; }
      set {
        seatIndex_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (SeatIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SeatIndex);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (SeatIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatIndex);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      seatIndex_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SeatIndex = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///叫地主结果
  /// </summary>
  public partial class Actor_JoyLds_CallLanlord : pb::IMessage {
    private static readonly pb::MessageParser<Actor_JoyLds_CallLanlord> _parser = new pb::MessageParser<Actor_JoyLds_CallLanlord>(() => (Actor_JoyLds_CallLanlord)MessagePool.Instance.Fetch(typeof(Actor_JoyLds_CallLanlord)));
    public static pb::MessageParser<Actor_JoyLds_CallLanlord> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int seatIndex_;
    public int SeatIndex {
      get { return seatIndex_; }
      set {
        seatIndex_ = value;
      }
    }

    private bool result_;
    public bool Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (SeatIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SeatIndex);
      }
      if (Result != false) {
        output.WriteRawTag(16);
        output.WriteBool(Result);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (SeatIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatIndex);
      }
      if (Result != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      seatIndex_ = 0;
      result_ = false;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SeatIndex = input.ReadInt32();
            break;
          }
          case 16: {
            Result = input.ReadBool();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///可以加倍
  /// </summary>
  public partial class Actor_JoyLds_CanAddTwice : pb::IMessage {
    private static readonly pb::MessageParser<Actor_JoyLds_CanAddTwice> _parser = new pb::MessageParser<Actor_JoyLds_CanAddTwice>(() => (Actor_JoyLds_CanAddTwice)MessagePool.Instance.Fetch(typeof(Actor_JoyLds_CanAddTwice)));
    public static pb::MessageParser<Actor_JoyLds_CanAddTwice> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int seatIndex_;
    public int SeatIndex {
      get { return seatIndex_; }
      set {
        seatIndex_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (SeatIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SeatIndex);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (SeatIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatIndex);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      seatIndex_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SeatIndex = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///加倍结果
  /// </summary>
  public partial class Actor_JoyLds_AddTwice : pb::IMessage {
    private static readonly pb::MessageParser<Actor_JoyLds_AddTwice> _parser = new pb::MessageParser<Actor_JoyLds_AddTwice>(() => (Actor_JoyLds_AddTwice)MessagePool.Instance.Fetch(typeof(Actor_JoyLds_AddTwice)));
    public static pb::MessageParser<Actor_JoyLds_AddTwice> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int seatIndex_;
    public int SeatIndex {
      get { return seatIndex_; }
      set {
        seatIndex_ = value;
      }
    }

    private bool result_;
    public bool Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (SeatIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SeatIndex);
      }
      if (Result != false) {
        output.WriteRawTag(16);
        output.WriteBool(Result);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (SeatIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatIndex);
      }
      if (Result != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      seatIndex_ = 0;
      result_ = false;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SeatIndex = input.ReadInt32();
            break;
          }
          case 16: {
            Result = input.ReadBool();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///可以抢地主
  /// </summary>
  public partial class Actor_JoyLds_CanRobLanlord : pb::IMessage {
    private static readonly pb::MessageParser<Actor_JoyLds_CanRobLanlord> _parser = new pb::MessageParser<Actor_JoyLds_CanRobLanlord>(() => (Actor_JoyLds_CanRobLanlord)MessagePool.Instance.Fetch(typeof(Actor_JoyLds_CanRobLanlord)));
    public static pb::MessageParser<Actor_JoyLds_CanRobLanlord> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int seatIndex_;
    public int SeatIndex {
      get { return seatIndex_; }
      set {
        seatIndex_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (SeatIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SeatIndex);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (SeatIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatIndex);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      seatIndex_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SeatIndex = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///抢地主结果
  /// </summary>
  public partial class Actor_JoyLds_RobLanlord : pb::IMessage {
    private static readonly pb::MessageParser<Actor_JoyLds_RobLanlord> _parser = new pb::MessageParser<Actor_JoyLds_RobLanlord>(() => (Actor_JoyLds_RobLanlord)MessagePool.Instance.Fetch(typeof(Actor_JoyLds_RobLanlord)));
    public static pb::MessageParser<Actor_JoyLds_RobLanlord> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int seatIndex_;
    public int SeatIndex {
      get { return seatIndex_; }
      set {
        seatIndex_ = value;
      }
    }

    private bool result_;
    public bool Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (SeatIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SeatIndex);
      }
      if (Result != false) {
        output.WriteRawTag(16);
        output.WriteBool(Result);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (SeatIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatIndex);
      }
      if (Result != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      seatIndex_ = 0;
      result_ = false;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SeatIndex = input.ReadInt32();
            break;
          }
          case 16: {
            Result = input.ReadBool();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///没人叫地主重新发牌
  /// </summary>
  public partial class Actor_JoyLds_AnewDeal : pb::IMessage {
    private static readonly pb::MessageParser<Actor_JoyLds_AnewDeal> _parser = new pb::MessageParser<Actor_JoyLds_AnewDeal>(() => (Actor_JoyLds_AnewDeal)MessagePool.Instance.Fetch(typeof(Actor_JoyLds_AnewDeal)));
    public static pb::MessageParser<Actor_JoyLds_AnewDeal> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///游戏结束 玩家选择退出房间
  /// </summary>
  public partial class Actor_JoyLds_OutRoom : pb::IMessage {
    private static readonly pb::MessageParser<Actor_JoyLds_OutRoom> _parser = new pb::MessageParser<Actor_JoyLds_OutRoom>(() => (Actor_JoyLds_OutRoom)MessagePool.Instance.Fetch(typeof(Actor_JoyLds_OutRoom)));
    public static pb::MessageParser<Actor_JoyLds_OutRoom> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int seatIndex_;
    /// <summary>
    ///退出玩家索引
    /// </summary>
    public int SeatIndex {
      get { return seatIndex_; }
      set {
        seatIndex_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (SeatIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SeatIndex);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (SeatIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatIndex);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      seatIndex_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SeatIndex = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///解散房间
  /// </summary>
  public partial class Actor_JoyLds_DissolveRoom : pb::IMessage {
    private static readonly pb::MessageParser<Actor_JoyLds_DissolveRoom> _parser = new pb::MessageParser<Actor_JoyLds_DissolveRoom>(() => (Actor_JoyLds_DissolveRoom)MessagePool.Instance.Fetch(typeof(Actor_JoyLds_DissolveRoom)));
    public static pb::MessageParser<Actor_JoyLds_DissolveRoom> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家准备
  /// </summary>
  public partial class Actor_JoyLds_Prepare : pb::IMessage {
    private static readonly pb::MessageParser<Actor_JoyLds_Prepare> _parser = new pb::MessageParser<Actor_JoyLds_Prepare>(() => (Actor_JoyLds_Prepare)MessagePool.Instance.Fetch(typeof(Actor_JoyLds_Prepare)));
    public static pb::MessageParser<Actor_JoyLds_Prepare> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int seatIndex_;
    /// <summary>
    ///准备玩家索引
    /// </summary>
    public int SeatIndex {
      get { return seatIndex_; }
      set {
        seatIndex_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (SeatIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SeatIndex);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (SeatIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatIndex);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      seatIndex_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SeatIndex = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///确定地主和农民阵营
  /// </summary>
  public partial class Actor_JoyLds_ConfirmCamp : pb::IMessage {
    private static readonly pb::MessageParser<Actor_JoyLds_ConfirmCamp> _parser = new pb::MessageParser<Actor_JoyLds_ConfirmCamp>(() => (Actor_JoyLds_ConfirmCamp)MessagePool.Instance.Fetch(typeof(Actor_JoyLds_ConfirmCamp)));
    public static pb::MessageParser<Actor_JoyLds_ConfirmCamp> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int landlordSeatIndex_;
    public int LandlordSeatIndex {
      get { return landlordSeatIndex_; }
      set {
        landlordSeatIndex_ = value;
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_landlordThreeCard_codec
        = pb::FieldCodec.ForInt32(18);
    private pbc::RepeatedField<int> landlordThreeCard_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> LandlordThreeCard {
      get { return landlordThreeCard_; }
      set { landlordThreeCard_ = value; }
    }

    private int seatIndex_;
    public int SeatIndex {
      get { return seatIndex_; }
      set {
        seatIndex_ = value;
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_hands_codec
        = pb::FieldCodec.ForInt32(34);
    private pbc::RepeatedField<int> hands_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> Hands {
      get { return hands_; }
      set { hands_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (LandlordSeatIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(LandlordSeatIndex);
      }
      landlordThreeCard_.WriteTo(output, _repeated_landlordThreeCard_codec);
      if (SeatIndex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SeatIndex);
      }
      hands_.WriteTo(output, _repeated_hands_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (LandlordSeatIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LandlordSeatIndex);
      }
      size += landlordThreeCard_.CalculateSize(_repeated_landlordThreeCard_codec);
      if (SeatIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatIndex);
      }
      size += hands_.CalculateSize(_repeated_hands_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      landlordSeatIndex_ = 0;
      landlordThreeCard_.Clear();
      seatIndex_ = 0;
      hands_.Clear();
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            LandlordSeatIndex = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            landlordThreeCard_.AddEntriesFrom(input, _repeated_landlordThreeCard_codec);
            break;
          }
          case 24: {
            SeatIndex = input.ReadInt32();
            break;
          }
          case 34:
          case 32: {
            hands_.AddEntriesFrom(input, _repeated_hands_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///可以出牌
  /// </summary>
  public partial class Actor_JoyLds_CanPlayCard : pb::IMessage {
    private static readonly pb::MessageParser<Actor_JoyLds_CanPlayCard> _parser = new pb::MessageParser<Actor_JoyLds_CanPlayCard>(() => (Actor_JoyLds_CanPlayCard)MessagePool.Instance.Fetch(typeof(Actor_JoyLds_CanPlayCard)));
    public static pb::MessageParser<Actor_JoyLds_CanPlayCard> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int seatIndex_;
    public int SeatIndex {
      get { return seatIndex_; }
      set {
        seatIndex_ = value;
      }
    }

    private bool isFirst_;
    public bool IsFirst {
      get { return isFirst_; }
      set {
        isFirst_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (SeatIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SeatIndex);
      }
      if (IsFirst != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsFirst);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (SeatIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatIndex);
      }
      if (IsFirst != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      seatIndex_ = 0;
      isFirst_ = false;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SeatIndex = input.ReadInt32();
            break;
          }
          case 16: {
            IsFirst = input.ReadBool();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家出牌
  /// </summary>
  public partial class Actor_JoyLds_PlayCard : pb::IMessage {
    private static readonly pb::MessageParser<Actor_JoyLds_PlayCard> _parser = new pb::MessageParser<Actor_JoyLds_PlayCard>(() => (Actor_JoyLds_PlayCard)MessagePool.Instance.Fetch(typeof(Actor_JoyLds_PlayCard)));
    public static pb::MessageParser<Actor_JoyLds_PlayCard> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int seatIndex_;
    public int SeatIndex {
      get { return seatIndex_; }
      set {
        seatIndex_ = value;
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_cards_codec
        = pb::FieldCodec.ForInt32(18);
    private pbc::RepeatedField<int> cards_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> Cards {
      get { return cards_; }
      set { cards_ = value; }
    }

    private int playCardType_;
    public int PlayCardType {
      get { return playCardType_; }
      set {
        playCardType_ = value;
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_hands_codec
        = pb::FieldCodec.ForInt32(34);
    private pbc::RepeatedField<int> hands_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> Hands {
      get { return hands_; }
      set { hands_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (SeatIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SeatIndex);
      }
      cards_.WriteTo(output, _repeated_cards_codec);
      if (PlayCardType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PlayCardType);
      }
      hands_.WriteTo(output, _repeated_hands_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (SeatIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatIndex);
      }
      size += cards_.CalculateSize(_repeated_cards_codec);
      if (PlayCardType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayCardType);
      }
      size += hands_.CalculateSize(_repeated_hands_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      seatIndex_ = 0;
      cards_.Clear();
      playCardType_ = 0;
      hands_.Clear();
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SeatIndex = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
          case 24: {
            PlayCardType = input.ReadInt32();
            break;
          }
          case 34:
          case 32: {
            hands_.AddEntriesFrom(input, _repeated_hands_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家不出牌
  /// </summary>
  public partial class Actor_JoyLds_DontPlay : pb::IMessage {
    private static readonly pb::MessageParser<Actor_JoyLds_DontPlay> _parser = new pb::MessageParser<Actor_JoyLds_DontPlay>(() => (Actor_JoyLds_DontPlay)MessagePool.Instance.Fetch(typeof(Actor_JoyLds_DontPlay)));
    public static pb::MessageParser<Actor_JoyLds_DontPlay> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int seatIndex_;
    public int SeatIndex {
      get { return seatIndex_; }
      set {
        seatIndex_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (SeatIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SeatIndex);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (SeatIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatIndex);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      seatIndex_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SeatIndex = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///游戏结果
  /// </summary>
  public partial class Actor_JoyLds_GameResult : pb::IMessage {
    private static readonly pb::MessageParser<Actor_JoyLds_GameResult> _parser = new pb::MessageParser<Actor_JoyLds_GameResult>(() => (Actor_JoyLds_GameResult)MessagePool.Instance.Fetch(typeof(Actor_JoyLds_GameResult)));
    public static pb::MessageParser<Actor_JoyLds_GameResult> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int winSeatIndex_;
    public int WinSeatIndex {
      get { return winSeatIndex_; }
      set {
        winSeatIndex_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.JoyLds_PlayerResult> _repeated_playerResults_codec
        = pb::FieldCodec.ForMessage(18, global::ETHotfix.JoyLds_PlayerResult.Parser);
    private pbc::RepeatedField<global::ETHotfix.JoyLds_PlayerResult> playerResults_ = new pbc::RepeatedField<global::ETHotfix.JoyLds_PlayerResult>();
    public pbc::RepeatedField<global::ETHotfix.JoyLds_PlayerResult> PlayerResults {
      get { return playerResults_; }
      set { playerResults_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (WinSeatIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WinSeatIndex);
      }
      playerResults_.WriteTo(output, _repeated_playerResults_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (WinSeatIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WinSeatIndex);
      }
      size += playerResults_.CalculateSize(_repeated_playerResults_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      winSeatIndex_ = 0;
      for (int i = 0; i < playerResults_.Count; i++) { MessagePool.Instance.Recycle(playerResults_[i]); }
      playerResults_.Clear();
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            WinSeatIndex = input.ReadInt32();
            break;
          }
          case 18: {
            playerResults_.AddEntriesFrom(input, _repeated_playerResults_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///单个玩家计算结果
  /// </summary>
  public partial class JoyLds_PlayerResult : pb::IMessage {
    private static readonly pb::MessageParser<JoyLds_PlayerResult> _parser = new pb::MessageParser<JoyLds_PlayerResult>(() => (JoyLds_PlayerResult)MessagePool.Instance.Fetch(typeof(JoyLds_PlayerResult)));
    public static pb::MessageParser<JoyLds_PlayerResult> Parser { get { return _parser; } }

    private int seatIndex_;
    public int SeatIndex {
      get { return seatIndex_; }
      set {
        seatIndex_ = value;
      }
    }

    private int getBeabs_;
    public int GetBeabs {
      get { return getBeabs_; }
      set {
        getBeabs_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (SeatIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SeatIndex);
      }
      if (GetBeabs != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GetBeabs);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (SeatIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatIndex);
      }
      if (GetBeabs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GetBeabs);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      seatIndex_ = 0;
      getBeabs_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SeatIndex = input.ReadInt32();
            break;
          }
          case 16: {
            GetBeabs = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///都地主玩家信息
  /// </summary>
  public partial class JoyLds_PlayerInfo : pb::IMessage {
    private static readonly pb::MessageParser<JoyLds_PlayerInfo> _parser = new pb::MessageParser<JoyLds_PlayerInfo>(() => (JoyLds_PlayerInfo)MessagePool.Instance.Fetch(typeof(JoyLds_PlayerInfo)));
    public static pb::MessageParser<JoyLds_PlayerInfo> Parser { get { return _parser; } }

    private int seatIndex_;
    /// <summary>
    ///座位索引
    /// </summary>
    public int SeatIndex {
      get { return seatIndex_; }
      set {
        seatIndex_ = value;
      }
    }

    private global::ETHotfix.User user_;
    /// <summary>
    ///玩家信息
    /// </summary>
    public global::ETHotfix.User User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (SeatIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SeatIndex);
      }
      if (user_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(User);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (SeatIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatIndex);
      }
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      seatIndex_ = 0;
      if (user_ != null) MessagePool.Instance.Recycle(user_); user_ = null;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SeatIndex = input.ReadInt32();
            break;
          }
          case 18: {
            if (user_ == null) {
              user_ = new global::ETHotfix.User();
            }
            input.ReadMessage(user_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
